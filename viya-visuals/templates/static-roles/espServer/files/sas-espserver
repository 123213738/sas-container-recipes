#!/bin/bash -e
# Copyright (c) 2017, SAS Institute Inc., Cary, NC, USA, All Rights Reserved
#
# Service: espserver
# Context: espserver
# DO NOT MODIFY THIS SCRIPT ABOVE THIS LINE

servicename=espserver
shortname=espserver
servicecontext=espserver

# SASDEPLOYID, SASINSTANCE and pidfile are typically specified by command arguments,
# but may be also be specified by environment variable.  If neither is specified, these
# default values are used.
[[ -z ${SASDEPLOYID+x} ]] && SASDEPLOYID=viya
[[ -z ${SASINSTANCE+x} ]] && SASINSTANCE=default
[[ -z ${pidfile+x} ]] && pidfile=/var/run/sas/sas-${SASDEPLOYID}-${shortname}-${SASINSTANCE}.pid

# Uncomment the set -x to run in debug mode
# set -x

excessargs=()

while [ -n "$1" ]
do
  case "$1" in
    -p)
      shift
      pidfile="$1"
      ;;

    -r)
      shift
      echo "[WARN] -r rootdir option is deprecated and ignored"
      ;;

    -l)
      shift
      echo "[WARN] -l logdir option is deprecated and ignored"
      ;;

    -d)
      shift
      SASDEPLOYID="$1"
      ;;

    -i)
      shift
      SASINSTANCE="$1"
      ;;

     *)
# if we don't recognize argument as expected opt, accumulate and let something else consume those
      excessargs+=("$1")
      ;;
  esac
  shift  # next value
done

# look for an optional sasenv.conf for this SASDEPLOYID
[[ -f /etc/sysconfig/sas/$SASDEPLOYID/sasenv.conf ]] && source /etc/sysconfig/sas/$SASDEPLOYID/sasenv.conf

# set standard environment if not already set
[[ -z ${SASHOME+x} ]] && SASHOME=/opt/sas/${SASDEPLOYID}/home

source $SASHOME/lib/envesntl/sas-start-functions

sas_set_service_env || sas_fail 1 "Unable to set up service environment"

[[ -n $SAS_CONFIG ]] ||                 export SAS_CONFIG='/opt/sas/${SASDEPLOYID}/config'
[[ -n $ESPVERSION ]] ||                 export ESPVERSION="$(basename $(readlink -f $SASHOME/SASEventStreamProcessingEngine/current))"
[[ -n $DFESP_CONFIG ]] ||               export DFESP_CONFIG=$SAS_CONFIG/etc/SASEventStreamProcessingEngine/default
[[ -n $DFESP_HOME ]] ||                 export DFESP_HOME=$SASHOME/SASEventStreamProcessingEngine/$ESPVERSION
[[ -n $ESP_AUTHENTICATION_STRING ]] ||  export ESP_AUTHENTICATION_STRING=""
[[ -n $ESP_LOGLEVEL_STRING ]] ||        export ESP_LOGLEVEL_STRING=""
[[ -n $ESP_MODEL_STRING ]] ||           export ESP_MODEL_STRING=""
[[ -n $ESP_HTTP_PORT ]] ||              export ESP_HTTP_PORT=31413
[[ -n $ESP_PUBSUB_PORT ]] ||            export ESP_PUBSUB_PORT=31416
[[ -z $SASLOGON_SERVERPORT ]] ||        export ESP_AUTHENTICATION_STRING="-auth saslogon://$SASLOGON_SERVERPORT"
[[ -z $ESP_LOGGING_LEVEL ]] ||          export ESP_LOGLEVEL_STRING="-loglevel ${ESP_LOGGING_LEVEL}"
[[ -z $ESP_MODEL_PATH ]] ||             export ESP_MODEL_STRING="-model ${ESP_MODEL_PATH}"
[[ -z $ESPENV ]] ||                     export ESPENV=""

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$DFESP_HOME/lib:$SASHOME/SASFoundation/sasexe

[[ -f $SAS_CONFIG/etc/sysconfig/SASEventStreamProcessingEngine/sas-esp ]] && source $SAS_CONFIG/etc/sysconfig/SASEventStreamProcessingEngine/sas-esp

# check for security policy
[[ -n $DFESP_SEC_YAML ]] && cp $DFESP_SEC_YAML $DFESP_CONFIG/security-properties.yml && cp $ESP_SERVER_CERT $DFESP_CONFIG && cp $ESP_CLIENT_CACERT $SAS_CONFIG/etc/SASSecurityCertificateFramework/cacerts/

[[ -d /data ]] && cd /data

if [[ -z $ESPENV ]]; then
    $DFESP_HOME/bin/dfesp_xml_server -http $ESP_HTTP_PORT -pubsub $ESP_PUBSUB_PORT $ESP_AUTHENTICATION_STRING $ESP_MODEL_STRING $ESP_LOGLEVEL_STRING
else
	$DFESP_HOME/bin/dfesp_xml_server
fi

pid=$!  # Bash get process ID of the most recently executed background (asynchronous) command
if [ -n "${pidfile}" ]; then
    # The variable pidfile is non-empty.
    echo "${pid}" > "${pidfile}"
fi
