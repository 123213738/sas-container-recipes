---
apiVersion: v1
kind: Service
metadata:
  name: {{ settings.project_name }}-{{ item.key }}
spec:
  selector:
    app: {{ settings.project_name }}-{{ item.key }}
{% if item.value.ports is defined and item.value.ports %}
  ports:
{%   for ports in item.value.ports %}
    - name: "{{ ports.split(':')[0] }}"
      protocol: TCP
      port: {{ ports.split(':')[0] }}
      targetPort: {{ ports.split(':')[0] }}
{%   endfor %}
{% endif %}
  clusterIP: None
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ settings.project_name }}-{{ item.key }}
spec:
  serviceName: "{{ settings.project_name }}-{{ item.key }}"
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ settings.project_name }}-{{ item.key }}
        domain: {{ settings.project_name }}
    spec:
{% if SECURE_CONSUL %}
      serviceAccountName: {{ settings.project_name }}-account
{% else %}
      #serviceAccountName: {{ settings.project_name }}-account
{% endif %}
      hostname: {{ settings.project_name }}-{{ item.key }}
      subdomain: {{ settings.project_name }}-subdomain
      containers:
      - name: {{ settings.project_name }}-{{ item.key }}
{% for regkey,regvalue in registries.items() %}
        image: {{ regvalue.url }}/{{ regvalue.namespace }}/{{ settings.project_name }}-{{ item.key }}:{{ docker_tag | default('latest') }}
{% endfor %}
        imagePullPolicy: Always
{% if item.value.ports is defined and item.value.ports %}
        ports:
{%   for ports in item.value.ports %}
        - containerPort: {{ ports.split(':')[0] }}
{%   endfor %}
{% endif %}
        env:
        - name: DEPLOYMENT_NAME
          value: "{{ settings.project_name }}"
        - name: CACERTS_CONFIGMAP
          value: "{{ settings.project_name }}-cacerts-configmap"
        - name: VAULT_TOKENS_CONFIGMAP
          value: consul-tokens-configmap
        - name: VAULT_TOKEN_SERVICE_LIST
          value: "sasdatasvrc,localconsul,sas-viya-consul-default,sas-viya-httpproxy,rabbitmq,sas-viya-sas-casserver-primary,sas-viya-rabbitmq,sas-viya-pgpoolc,sas-viya-adminservices,sas-viya-advancedanalytics,sas-viya-casservices,sas-viya-cognitivecomputingservices,sas-viya-computeserver,sas-viya-computeservices,sas-viya-configuratn,sas-viya-coreservices,sas-viya-datamining,sas-viya-dataservices,sas-viya-graphbuilderservices,sas-viya-homeservices,sas-viya-modelservices,sas-viya-operations,sas-viya-programming,sas-viya-reportservices,sas-viya-reportviewerservices,sas-viya-sas-casserver-worker,sas-viya-sasdatasvrc,sas-viya-scoringservices,sas-viya-studioviya,sas-viya-themeservices,postgres,pgpool,httpproxy"
        - name: CONSUL_HTTP_ADDR
          valueFrom:
            configMapKeyRef:
              name: sas-viya-consul
              key: consul_http_addr
        - name: SAS_ANCHORS_DIR
          valueFrom:
            configMapKeyRef:
              name: sas-viya-consul
              key: sas_anchors_dir
        - name: VAULT_TOKEN_DIR
          valueFrom:
            configMapKeyRef:
              name: sas-viya-consul
              key: vault_token_dir
        - name: CONSUL_SERVICE_NAME
          value: {{ settings.project_name }}-{{ item.key }}
{% if item.value.deployment_overrides.environment is defined and item.value.deployment_overrides.environment %}
{%   for environment in item.value.deployment_overrides.environment %}
        - name: {{ environment.split('=')[0] }}
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-{{ item.key }}
              key: {{ environment.split('=')[0] | lower }}
{%   endfor %}
{% endif %}
{% for secrets in services.consul.deployment_overrides.secrets %}
{%   if 'CONSUL_HTTP_TOKEN' not in secrets %}
        - name: {{ secrets.split('=')[0] }}
          valueFrom:
            secretKeyRef:
              name: {{ settings.project_name }}-{{ item.key }}
              key: {{ secrets.split('=')[0] | lower }}
{%   endif %}
{% endfor %}
{% if item.value.deployment_overrides.resources is defined and item.value.deployment_overrides.resources %}
        resources:
{%   for key,value in item.value.deployment_overrides.resources.items() %}
          {{ key }}:
{%     for items in value %}
            {{ items.split('=')[0] }}: {{ items.split('=')[1] }}
{%     endfor %}
{%   endfor %}
{% endif %}
{% if item.value.deployment_overrides.volumes is defined and item.value.deployment_overrides.volumes %}
        volumeMounts:
{%   for volumes in item.value.deployment_overrides.volumes %}
        - name: {{ settings.project_name }}-{{ item.key }}-{{ volumes.split('=')[0] }}-volume
          mountPath: {{ volumes.split('=')[1] }}
{%   endfor %}
{% if SECURE_CONSUL %}
        # Required for TLS configurations comment out existing empty dir volumeMount
        - name: consul-persistent-storage
          mountPath: /consul/config
        - name: consul-persistent-storage
          mountPath: /consul/data
{% else %}
        # Required for TLS configurations
        #- name: consul-persistent-storage
        #  mountPath: /consul/config
        #- name: consul-persistent-storage
        #  mountPath: /consul/data
{% endif %}
        - name: anchors
          mountPath: /anchors
        - name: tokens
          mountPath: /tokens
{% endif %}

{% if item.value.deployment_overrides.volumes is defined and item.value.deployment_overrides.volumes %}
      volumes:
{%   for volumes in item.value.deployment_overrides.volumes %}
      - name: {{ settings.project_name }}-{{ item.key }}-{{ volumes.split('=')[0] }}-volume
        emptyDir: {}
{%   endfor %}
      # Needed for TLS configurations
      - name: tokens
        configMap:
          name: consul-tokens-configmap
      - name: anchors
        configMap:
          name: {{ settings.project_name }}-cacerts-configmap
{% endif %}
  # Persistent storage required for TLS configurations
  # volumeClaimTemplates:
  # - metadata:
  #       name: consul-persistent-storage
  #   spec:
  #     accessModes:
  #     - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: 1Gi
  #     storageClassName: managed-nfs-storage
...
